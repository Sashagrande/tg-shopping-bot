import {Telegraf} from 'telegraf';
import * as dotenv from 'dotenv';
// –∫–æ–Ω—Ñ–∏–≥ –≥—Ä—É–∑–∏–º
dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN as string);
console.log('–ë–æ—Ç —Å–æ–∑–¥–∞–Ω');

// –•—Ä–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ª—É—á–∏–≤—à–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
const greetedUsers = new Set<number>();

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
bot.on('text', (ctx) => {
    const userId = ctx.from.id;
    const username = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const messageText = ctx.message.text;

    if (!greetedUsers.has(userId)) {
        ctx.reply(
            `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω, ${username}! –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏:`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{text: '–ö–∞—Ç–∞–ª–æ–≥ üóÇ', callback_data: 'catalog'}],
                        [{text: '–ö–æ—Ä–∑–∏–Ω–∞ üß∫', callback_data: 'cart'}],
                        [{text: '–ó–∞–∫–∞–∑—ã üìå', callback_data: 'orders'}],
                    ],
                },
            }
        );
        greetedUsers.add(userId);
        console.log(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${username}`);
        return
    }
    ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º!');
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
bot.action('catalog', (ctx) => {
    ctx.answerCbQuery(); // –£–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    ctx.reply('–¢—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!');
});

bot.action('cart', (ctx) => {
    ctx.answerCbQuery();
    ctx.reply('–¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.');
});

bot.action('orders', (ctx) => {
    ctx.answerCbQuery();
    ctx.reply('–¢–≤–æ–∏ –∑–∞–∫–∞–∑—ã (–ø–æ–∫–∞ –∏—Ö –Ω–µ—Ç).');
});


bot.launch()
    .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'))
    .catch((error) => console.error('–û—à–∏–±–∫–∞:', error));
